'''
피보나치 함수를 재귀 함수로 구현
단점 - 동일한 함수가 반복적으로 호출되기 때문에 n이 커질 수록 실행시간 기하급수적으로 커짐
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x-1) + fibo(x-2)

print(fibo(4))

----------------------------------------------------------------------------------------------

(8-2)
#한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

#피보나치 함수를 재귀함수로 구현(상향식[Top-Down] 다이나믹 프로그래밍)
def fibo(x):
    #호출되는 함수 출력(8-3)
    print('f(' + str(x) + ')', end = ' ')
    #종료조건(1 혹은 2일 때 1을 반환)
    if x==1 or x==2:
        return 1
    #이미 계산한적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    #아직 계산한지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]

print(fibo(6))

----------------------------------------------------------------------------------------------

'''
#(8-4) 피보나치 수열(반복적)
d = [0] * 100 #앞서 계산된 결과를 저장하기 위한 *DP테이블* 초기화
d[1] = 1
d[2] = 1
n = 99

#피보나치 함수 반복문으로 구현(하향식[Bottom-up] 다이나믹 프로그래밍)
for i in range(3, n+1):
    d[i] = d[i-1] + d[i-2]
    
print(d[n])